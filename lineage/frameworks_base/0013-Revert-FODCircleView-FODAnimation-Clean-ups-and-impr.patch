From 017380373add799ce0caca24d2b889378b3c3a72 Mon Sep 17 00:00:00 2001
From: Victor Bo <bvoid@yandex.ru>
Date: Sun, 19 Sep 2021 18:57:30 +0000
Subject: [PATCH 13/52] Revert "FODCircleView/FODAnimation: Clean ups and
 improvements"

This reverts commit 06b5f5730c036f99b9e9441d344fa175f9605bc9.
---
 .../systemui/biometrics/FODAnimation.java     |  20 ++-
 .../systemui/biometrics/FODCircleView.java    | 149 +++++++++---------
 2 files changed, 89 insertions(+), 80 deletions(-)

diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/FODAnimation.java b/packages/SystemUI/src/com/android/systemui/biometrics/FODAnimation.java
index 87f88a7e4d1..08ce10010a2 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/FODAnimation.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/FODAnimation.java
@@ -41,6 +41,7 @@ public class FODAnimation extends ImageView {
     private AnimationDrawable recognizingAnim;
     private WindowManager mWindowManager;
     private boolean mIsKeyguard;
+    private boolean mIsRecognizingAnimEnabled;
 
     private int mSelectedAnim;
     private String[] ANIMATION_STYLES_NAMES = {
@@ -98,6 +99,11 @@ public class FODAnimation extends ImageView {
         mAnimParams.y = mPositionY - (mAnimationSize / 2) + mAnimationOffset;
 
         setScaleType(ImageView.ScaleType.CENTER_INSIDE);
+
+        mIsRecognizingAnimEnabled = Settings.System.getInt(mContext.getContentResolver(),
+            Settings.System.FOD_RECOGNIZING_ANIMATION, 0) != 0;
+
+        update(mIsRecognizingAnimEnabled);
     }
 
     private void updateAnimationStyle(String drawableName) {
@@ -116,13 +122,16 @@ public class FODAnimation extends ImageView {
         }
     }
 
-    public void update(boolean isEnabled, int selectedAnim) {
+    public void update(boolean isEnabled) {
+        mSelectedAnim = Settings.System.getInt(mContext.getContentResolver(),
+                Settings.System.FOD_ANIM, 0);
+
         if (isEnabled)
             setAlpha(1.0f);
         else
             setAlpha(0.0f);
 
-        updateAnimationStyle(ANIMATION_STYLES_NAMES[selectedAnim]);
+        updateAnimationStyle(ANIMATION_STYLES_NAMES[mSelectedAnim]);
     }
 
     public void updateParams(int mDreamingOffsetY) {
@@ -136,14 +145,11 @@ public class FODAnimation extends ImageView {
     public void showFODanimation() {
         if (mAnimParams != null && !mShowing && mIsKeyguard) {
             mShowing = true;
-            if (this.getWindowToken() == null) {
+            if (this.getWindowToken() == null){
                 mWindowManager.addView(this, mAnimParams);
-            } else {
                 mWindowManager.updateViewLayout(this, mAnimParams);
             }
-            if (recognizingAnim != null) {
-                recognizingAnim.start();
-            }
+            recognizingAnim.start();
         }
     }
 
diff --git a/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleView.java b/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleView.java
index a38526baeca..c2d5acc4d90 100644
--- a/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleView.java
+++ b/packages/SystemUI/src/com/android/systemui/biometrics/FODCircleView.java
@@ -17,13 +17,16 @@
 package com.android.systemui.biometrics;
 
 import android.app.admin.DevicePolicyManager;
+import android.content.ContentResolver;
 import android.content.Context;
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.content.res.Resources;
+import android.database.ContentObserver;
 import android.graphics.Canvas;
 import android.graphics.Color;
 import android.graphics.Paint;
+import android.graphics.drawable.AnimationDrawable;
 import android.graphics.PixelFormat;
 import android.graphics.Point;
 import android.hardware.biometrics.BiometricSourceType;
@@ -64,20 +67,7 @@ import java.util.TimerTask;
 public class FODCircleView extends ImageView implements TunerService.Tunable {
     private static final int FADE_ANIM_DURATION = 125;
     private static final String DOZE_INTENT = "com.android.systemui.doze.pulse";
-
-    private static final String FOD_GESTURE =
-            "system:" + Settings.System.FOD_GESTURE;
-    private static final String DOZE_ENABLED =
-            Settings.Secure.DOZE_ENABLED;
-    private static final String FOD_ANIM =
-            "system:" + Settings.System.FOD_ANIM;
-    private static final String FOD_RECOGNIZING_ANIMATION =
-            "system:" + Settings.System.FOD_RECOGNIZING_ANIMATION;
-    private static final String FOD_ICON =
-            "system:" + Settings.System.FOD_ICON;
-    private static final String FOD_COLOR =
-            "system:" + Settings.System.FOD_COLOR;
-
+    private static final String FOD_GESTURE = "system:" + Settings.System.FOD_GESTURE;
     private final int mPositionX;
     private final int mPositionY;
     private final int mSize;
@@ -104,7 +94,6 @@ public class FODCircleView extends ImageView implements TunerService.Tunable {
     private boolean mTouchedOutside;
 
     private boolean mDozeEnabled;
-    private boolean mDozeEnabledByDefault;
     private boolean mFodGestureEnable;
     private boolean mPressPending;
     private boolean mScreenTurnedOn;
@@ -122,7 +111,7 @@ public class FODCircleView extends ImageView implements TunerService.Tunable {
 
     private FODAnimation mFODAnimation;
     private boolean mIsRecognizingAnimEnabled;
-    private int mFodAnim = 0;
+    private boolean mIsFodAnimationAvailable = false;
 
     private int mSelectedIcon;
     private final int[] ICON_STYLES = {
@@ -237,12 +226,8 @@ public class FODCircleView extends ImageView implements TunerService.Tunable {
         @Override
         public void onKeyguardVisibilityChanged(boolean showing) {
             mIsKeyguard = showing;
-            if (!showing) {
-                hide();
-            } else {
-                updateAlpha();
-            }
-            if (mFODAnimation != null && mIsRecognizingAnimEnabled) {
+            updateStyle();
+            if (mIsFodAnimationAvailable && mFODAnimation != null) {
                 mFODAnimation.setAnimationKeyguard(mIsKeyguard);
             }
         }
@@ -250,6 +235,7 @@ public class FODCircleView extends ImageView implements TunerService.Tunable {
         @Override
         public void onKeyguardBouncerChanged(boolean isBouncer) {
             mIsBouncer = isBouncer;
+            updateStyle();
             if (mUpdateMonitor.isFingerprintDetectionRunning()) {
                 if (isPinOrPattern(mUpdateMonitor.getCurrentUser()) || !isBouncer) {
                     show();
@@ -259,6 +245,9 @@ public class FODCircleView extends ImageView implements TunerService.Tunable {
             } else {
                 hide();
             }
+            if (mIsFodAnimationAvailable && mFODAnimation != null) {
+                mFODAnimation.setAnimationKeyguard(mIsBouncer);
+            }
         }
 
         @Override
@@ -282,7 +271,8 @@ public class FODCircleView extends ImageView implements TunerService.Tunable {
         public void onScreenTurnedOn() {
             if (mUpdateMonitor.isFingerprintDetectionRunning() && !mFodGestureEnable) {
                 show();
-            } else if (mFodGestureEnable && mPressPending) {
+            }
+            if (mPressPending) {
                 mHandler.post(() -> showCircle());
                 mPressPending = false;
             }
@@ -292,7 +282,7 @@ public class FODCircleView extends ImageView implements TunerService.Tunable {
         @Override
         public void onBiometricHelp(int msgId, String helpString,
                 BiometricSourceType biometricSourceType) {
-            if (msgId == -1 && mFODAnimation != null && mIsRecognizingAnimEnabled) { // Auth error
+            if (msgId == -1 && mIsFodAnimationAvailable) { // Auth error
                 mHandler.post(() -> mFODAnimation.hideFODanimation());
             }
         }
@@ -365,6 +355,8 @@ public class FODCircleView extends ImageView implements TunerService.Tunable {
 
         mWindowManager.addView(this, mParams);
 
+        mCustomSettingsObserver.observe();
+        mCustomSettingsObserver.update();
         updatePosition();
         hide();
 
@@ -373,60 +365,57 @@ public class FODCircleView extends ImageView implements TunerService.Tunable {
         mUpdateMonitor = Dependency.get(KeyguardUpdateMonitor.class);
         mUpdateMonitor.registerCallback(mMonitorCallback);
 
-        boolean isFodAnimationAvailable = Utils.isPackageInstalled(context,
+        mIsFodAnimationAvailable = Utils.isPackageInstalled(context,
                                     context.getResources().getString(
                                     com.android.internal.R.string.config_fodAnimationPackage));
-        if (isFodAnimationAvailable) {
+        if (mIsFodAnimationAvailable) {
             mFODAnimation = new FODAnimation(context, mPositionX, mPositionY);
         }
 
-        mDozeEnabledByDefault = mContext.getResources().getBoolean(
-                    com.android.internal.R.bool.config_doze_enabled_by_default);
-
-        Dependency.get(TunerService.class).addTunable(this,
-                FOD_GESTURE,
-                DOZE_ENABLED,
-                FOD_ANIM,
-                FOD_RECOGNIZING_ANIMATION,
-                FOD_ICON,
-                FOD_COLOR);
+        Dependency.get(TunerService.class).addTunable(this, FOD_GESTURE,
+                Settings.Secure.DOZE_ENABLED);
     }
 
     @Override
     public void onTuningChanged(String key, String newValue) {
-        switch (key) {
-            case FOD_GESTURE:
-                mFodGestureEnable =
-                        TunerService.parseIntegerSwitch(newValue, false);
-                break;
-            case DOZE_ENABLED:
-                mDozeEnabled =
-                        TunerService.parseIntegerSwitch(newValue, mDozeEnabledByDefault);
-                break;
-            case FOD_ANIM:
-                mFodAnim =
-                        TunerService.parseInteger(newValue, 0);
-                if (mFODAnimation != null) {
-                    mFODAnimation.update(mIsRecognizingAnimEnabled, mFodAnim);
-                }
-                break;
-            case FOD_RECOGNIZING_ANIMATION:
-                mIsRecognizingAnimEnabled =
-                        TunerService.parseIntegerSwitch(newValue, false);
-                if (mFODAnimation != null) {
-                    mFODAnimation.update(mIsRecognizingAnimEnabled, mFodAnim);
-                }
-                break;
-            case FOD_ICON:
-                mSelectedIcon =
-                        TunerService.parseInteger(newValue, 0);
-                break;
-            case FOD_COLOR:
-                mPressedColor =
-                        TunerService.parseInteger(newValue, mDefaultPressedColor);
-                break;
-            default:
-                break;
+        if (key.equals(FOD_GESTURE)) {
+            mFodGestureEnable = TunerService.parseIntegerSwitch(newValue, false);
+        } else {
+            mDozeEnabled = TunerService.parseIntegerSwitch(newValue, true);
+        }
+    }
+
+    private CustomSettingsObserver mCustomSettingsObserver = new CustomSettingsObserver(mHandler);
+    private class CustomSettingsObserver extends ContentObserver {
+
+        CustomSettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observe() {
+            ContentResolver resolver = mContext.getContentResolver();
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.FOD_ANIM),
+                    false, this, UserHandle.USER_ALL);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.FOD_ICON),
+                    false, this, UserHandle.USER_ALL);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.FOD_COLOR),
+                    false, this, UserHandle.USER_ALL);
+        }
+
+        @Override
+        public void onChange(boolean selfChange, Uri uri) {
+            if (uri.equals(Settings.System.getUriFor(Settings.System.FOD_ANIM)) ||
+                    uri.equals(Settings.System.getUriFor(Settings.System.FOD_ICON)) ||
+                    uri.equals(Settings.System.getUriFor(Settings.System.FOD_COLOR))) {
+                updateStyle();
+            }
+        }
+
+        public void update() {
+            updateStyle();
         }
     }
 
@@ -461,7 +450,7 @@ public class FODCircleView extends ImageView implements TunerService.Tunable {
             return true;
         }
 
-        if (mFODAnimation != null && mIsRecognizingAnimEnabled) {
+        if (mIsFodAnimationAvailable) {
             mHandler.post(() -> mFODAnimation.hideFODanimation());
         }
         return false;
@@ -469,6 +458,7 @@ public class FODCircleView extends ImageView implements TunerService.Tunable {
 
     @Override
     public void onConfigurationChanged(Configuration newConfig) {
+        updateStyle();
         updatePosition();
     }
 
@@ -535,7 +525,7 @@ public class FODCircleView extends ImageView implements TunerService.Tunable {
         setDim(true);
         dispatchPress();
 
-        if (mFODAnimation != null && mIsRecognizingAnimEnabled) {
+        if (mIsFodAnimationAvailable) {
             mHandler.post(() -> mFODAnimation.showFODanimation());
         }
 
@@ -552,7 +542,7 @@ public class FODCircleView extends ImageView implements TunerService.Tunable {
         dispatchRelease();
         setDim(false);
 
-        if (mFODAnimation != null && mIsRecognizingAnimEnabled) {
+        if (mIsFodAnimationAvailable) {
             mHandler.post(() -> mFODAnimation.hideFODanimation());
         }
 
@@ -622,6 +612,19 @@ public class FODCircleView extends ImageView implements TunerService.Tunable {
         setAlpha(mIsDreaming ? 0.5f : 1.0f);
     }
 
+    private void updateStyle() {
+        mIsRecognizingAnimEnabled = Settings.System.getInt(mContext.getContentResolver(),
+                Settings.System.FOD_RECOGNIZING_ANIMATION, 0) != 0;
+        mSelectedIcon = Settings.System.getInt(mContext.getContentResolver(),
+                Settings.System.FOD_ICON, 0);
+        mPressedColor = Settings.System.getInt(mContext.getContentResolver(),
+                Settings.System.FOD_COLOR, mDefaultPressedColor);
+
+        if (mIsFodAnimationAvailable && mFODAnimation != null) {
+            mFODAnimation.update(mIsRecognizingAnimEnabled);
+        }
+    }
+
     private void updatePosition() {
         Display defaultDisplay = mWindowManager.getDefaultDisplay();
 
@@ -657,7 +660,7 @@ public class FODCircleView extends ImageView implements TunerService.Tunable {
         if (mIsDreaming) {
             mParams.x += mDreamingOffsetX;
             mParams.y += mDreamingOffsetY;
-            if (mFODAnimation != null && mIsRecognizingAnimEnabled) {
+            if (mIsFodAnimationAvailable) {
                 mFODAnimation.updateParams(mParams.y);
             }
         }
-- 
2.30.2

